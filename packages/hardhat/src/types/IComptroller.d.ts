/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IComptrollerInterface extends ethers.utils.Interface {
  functions: {
    "buyShares(address[],uint256[],uint256[])": FunctionFragment;
    "redeemShares()": FunctionFragment;
    "redeemSharesDetailed(uint256,address[],address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyShares",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemSharesDetailed",
    values: [BigNumberish, string[], string[]]
  ): string;

  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemSharesDetailed",
    data: BytesLike
  ): Result;

  events: {};
}

export class IComptroller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IComptrollerInterface;

  functions: {
    buyShares(
      _buyers: string[],
      _investmentAmounts: BigNumberish[],
      _minSharesQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemSharesDetailed(
      _sharesQuantity: BigNumberish,
      _additionalAssets: string[],
      _assetsToSkip: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyShares(
    _buyers: string[],
    _investmentAmounts: BigNumberish[],
    _minSharesQuantities: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemShares(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemSharesDetailed(
    _sharesQuantity: BigNumberish,
    _additionalAssets: string[],
    _assetsToSkip: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyShares(
      _buyers: string[],
      _investmentAmounts: BigNumberish[],
      _minSharesQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    redeemShares(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        payoutAssets_: string[];
        payoutAmounts_: BigNumber[];
      }
    >;

    redeemSharesDetailed(
      _sharesQuantity: BigNumberish,
      _additionalAssets: string[],
      _assetsToSkip: string[],
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        payoutAssets_: string[];
        payoutAmounts_: BigNumber[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    buyShares(
      _buyers: string[],
      _investmentAmounts: BigNumberish[],
      _minSharesQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemSharesDetailed(
      _sharesQuantity: BigNumberish,
      _additionalAssets: string[],
      _assetsToSkip: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyShares(
      _buyers: string[],
      _investmentAmounts: BigNumberish[],
      _minSharesQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemSharesDetailed(
      _sharesQuantity: BigNumberish,
      _additionalAssets: string[],
      _assetsToSkip: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
